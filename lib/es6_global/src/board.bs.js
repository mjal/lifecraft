// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "../../../node_modules/bs-platform/lib/es6/list.js";
import * as $$Array from "../../../node_modules/bs-platform/lib/es6/array.js";
import * as Matrix from "./matrix.bs.js";
import * as Caml_array from "../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Caml_chrome_debugger from "../../../node_modules/bs-platform/lib/es6/caml_chrome_debugger.js";
import * as Caml_builtin_exceptions from "../../../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";

function flip(i, j, board) {
  return Matrix.mapij((function (i2, j2, e) {
                if (i === i2 && j === j2) {
                  if (e) {
                    return /* Dead */0;
                  } else {
                    return /* Alive */1;
                  }
                } else {
                  return e;
                }
              }), board);
}

function reset(board) {
  return Matrix.make(Matrix.width(board), Matrix.height(board), /* Dead */0);
}

function resize(board, x, y) {
  var w = Matrix.width(board);
  var h = Matrix.height(board);
  var a = Matrix.make(x, y, /* Dead */0);
  Matrix.blit(board, 0, 0, a, 0, 0, x < w ? x : w, y < h ? y : h);
  return a;
}

function clamp(board) {
  var is_alive = function (param) {
    return /* Alive */1 === param;
  };
  var match;
  try {
    match = /* tuple */[
      Matrix.findi(is_alive, board),
      Matrix.findri(is_alive, board),
      Matrix.vfindi(is_alive, board),
      Matrix.vfindri(is_alive, board)
    ];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      match = /* tuple */[
        0,
        0,
        0,
        0
      ];
    } else {
      throw exn;
    }
  }
  var y1 = match[2];
  var x1 = match[0];
  var w = match[1] - x1 | 0;
  var h = match[3] - y1 | 0;
  var a = $$Array.make_matrix(w + 3 | 0, h + 3 | 0, /* Dead */0);
  Matrix.blit(board, x1, y1, a, 1, 1, w + 1 | 0, h + 1 | 0);
  return a;
}

function next(rule, board) {
  var is_inside = function (param) {
    var j = param[1];
    var i = param[0];
    if (i >= 0 && i < Matrix.width(board) && j >= 0) {
      return j < Matrix.height(board);
    } else {
      return false;
    }
  };
  var sum_neighbourg = function (x, y) {
    var neighbourg = List.map((function (param) {
            var param$1 = /* tuple */[
              x + param[0] | 0,
              y + param[1] | 0
            ];
            var j = param$1[1];
            var i = param$1[0];
            if (is_inside(/* tuple */[
                    i,
                    j
                  ])) {
              var match = Caml_array.caml_array_get(Caml_array.caml_array_get(board, i), j);
              if (match) {
                return 1;
              } else {
                return 0;
              }
            } else {
              return 0;
            }
          }), /* :: */Caml_chrome_debugger.simpleVariant("::", [
            /* tuple */[
              -1,
              -1
            ],
            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  -1,
                  0
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      -1,
                      1
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          0,
                          -1
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              0,
                              1
                            ],
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* tuple */[
                                  1,
                                  -1
                                ],
                                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    /* tuple */[
                                      1,
                                      0
                                    ],
                                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                        /* tuple */[
                                          1,
                                          1
                                        ],
                                        /* [] */0
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ])
              ])
          ]));
    return List.fold_left((function (prim, prim$1) {
                  return prim + prim$1 | 0;
                }), 0, neighbourg);
  };
  var next_one = function (i, j, e) {
    var n = sum_neighbourg(i, j);
    if (e) {
      if (n === 3 || n === 2) {
        return /* Alive */1;
      } else {
        return /* Dead */0;
      }
    } else if (n !== 3 && (n !== 6 || !rule)) {
      return /* Dead */0;
    } else {
      return /* Alive */1;
    }
  };
  return Matrix.mapij(next_one, board);
}

function update(state, param) {
  if (typeof param === "number") {
    switch (param) {
      case /* Reset */1 :
          return clamp(reset(state.board));
      case /* Next */2 :
          return next(state.rule, state.board);
      case /* Clamp */6 :
          return clamp(state.board);
      default:
        return state.board;
    }
  } else {
    switch (param.tag | 0) {
      case /* Flip */0 :
          return clamp(flip(param[0], param[1], state.board));
      case /* SetSize */4 :
          return resize(state.board, param[0], param[1]);
      default:
        return state.board;
    }
  }
}

export {
  flip ,
  reset ,
  resize ,
  clamp ,
  next ,
  update ,
  
}
/* No side effect */
