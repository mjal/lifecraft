// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Vdom from "../../../node_modules/bucklescript-tea/lib/es6_global/src-ocaml/vdom.js";
import * as Curry from "../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Tea_sub from "../../../node_modules/bucklescript-tea/lib/es6_global/src-ocaml/tea_sub.js";
import * as Tea_json from "../../../node_modules/bucklescript-tea/lib/es6_global/src-ocaml/tea_json.js";
import * as Caml_option from "../../../node_modules/bs-platform/lib/es6/caml_option.js";
import * as Caml_chrome_debugger from "../../../node_modules/bs-platform/lib/es6/caml_chrome_debugger.js";

var key_event = Tea_json.Decoder.map5((function (key_code, shift, ctrl, alt, meta) {
        return {
                key_code: key_code,
                shift: shift,
                ctrl: ctrl,
                alt: alt,
                meta: meta
              };
      }), Tea_json.Decoder.field("keyCode", Tea_json.Decoder.$$int), Tea_json.Decoder.field("shiftKey", Tea_json.Decoder.bool), Tea_json.Decoder.field("ctrlKey", Tea_json.Decoder.bool), Tea_json.Decoder.field("altKey", Tea_json.Decoder.bool), Tea_json.Decoder.field("metaKey", Tea_json.Decoder.bool));

function registerGlobal(name, key, tagger) {
  var enableCall = function (callbacks_base) {
    var callbacks = {
      contents: callbacks_base
    };
    var fn = function (ev) {
      var match = Tea_json.Decoder.decodeEvent(key_event, ev);
      if (match.tag) {
        return ;
      } else {
        return Caml_option.some(Curry._1(tagger, match[0]));
      }
    };
    var handler = /* EventHandlerCallback */Caml_chrome_debugger.variant("EventHandlerCallback", 0, [
        key,
        fn
      ]);
    var elem = document;
    var cache = Vdom.eventHandler_Register(callbacks, elem, name, handler);
    return (function (param) {
        Vdom.eventHandler_Unregister(elem, name, cache);
        return /* () */0;
      });
  };
  return Tea_sub.registration(key, enableCall);
}

function downs($staropt$star, tagger) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return registerGlobal("keydown", key, tagger);
}

export {
  key_event ,
  registerGlobal ,
  downs ,
  
}
/* key_event Not a pure module */
