// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "../../../node_modules/bs-platform/lib/es6/list.js";
import * as Vdom from "../../../node_modules/bucklescript-tea/lib/es6_global/src-ocaml/vdom.js";
import * as $$Array from "../../../node_modules/bs-platform/lib/es6/array.js";
import * as Matrix from "./matrix.bs.js";
import * as Tea_svg from "../../../node_modules/bucklescript-tea/lib/es6_global/src-ocaml/tea_svg.js";
import * as Tea_html from "../../../node_modules/bucklescript-tea/lib/es6_global/src-ocaml/tea_html.js";
import * as Caml_chrome_debugger from "../../../node_modules/bs-platform/lib/es6/caml_chrome_debugger.js";

function draw_html(state) {
  var draw_line = function (i, line) {
    return Tea_html.div(undefined, undefined, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  Tea_html.class$prime("flex-1 flex"),
                  /* [] */0
                ]), $$Array.to_list($$Array.mapi((function (param, param$1) {
                          var i$1 = i;
                          var j = param;
                          var e = param$1;
                          return Tea_html.div(undefined, undefined, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                        Tea_html.class$prime(e === /* Alive */1 ? "alive" : "dead"),
                                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            Tea_html.onClick(/* Flip */Caml_chrome_debugger.variant("Flip", 0, [
                                                    i$1,
                                                    j
                                                  ])),
                                            /* [] */0
                                          ])
                                      ]), /* [] */0);
                        }), line)));
  };
  return $$Array.to_list($$Array.mapi(draw_line, state.board));
}

function draw_svg(state) {
  var cells = Matrix.mapij((function (i, j, e) {
          var i$1 = i;
          var j$1 = j;
          var e$1 = e;
          var w = 100 / Matrix.width(state.board);
          var h = 100 / Matrix.height(state.board);
          var x = i$1 * w;
          var y = j$1 * h;
          return Tea_svg.node("rect", undefined, undefined, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        Vdom.attribute("", "x", x.toPrecision(4)),
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            Vdom.attribute("", "y", y.toPrecision(4)),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                Vdom.attribute("", "width", w.toPrecision(4)),
                                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    Vdom.attribute("", "height", h.toPrecision(4)),
                                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                        Vdom.attribute("", "fill", e$1 === /* Alive */1 ? "black" : "white"),
                                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            Vdom.attribute("", "stroke-width", "0.5"),
                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                Vdom.attribute("", "stroke", "pink"),
                                                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    Tea_html.onClick(/* Flip */Caml_chrome_debugger.variant("Flip", 0, [
                                                            i$1,
                                                            j$1
                                                          ])),
                                                    /* [] */0
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]), /* [] */0);
        }), state.board);
  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
            Tea_svg.svg(undefined, undefined, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Vdom.attribute("", "viewBox", "0 0 100 100"),
                    /* [] */0
                  ]), List.flatten($$Array.to_list($$Array.map($$Array.to_list, cells)))),
            /* [] */0
          ]);
}

function draw_canvas(state) {
  var matrix_width = Matrix.width(state.board);
  var matrix_height = Matrix.height(state.board);
  matrix_width !== 0 && matrix_height !== 0;
  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
            Tea_html.canvas(undefined, undefined, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Vdom.attribute("", "width", "800"),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        Vdom.attribute("", "height", "600"),
                        /* [] */0
                      ])
                  ]), /* [] */0),
            /* [] */0
          ]);
}

function draw(state) {
  var match = state.backend;
  switch (match) {
    case /* Html */0 :
        return draw_html(state);
    case /* Svg */1 :
        return draw_svg(state);
    case /* Canvas */2 :
        return draw_canvas(state);
    
  }
}

export {
  draw_html ,
  draw_svg ,
  draw_canvas ,
  draw ,
  
}
/* Tea_html Not a pure module */
